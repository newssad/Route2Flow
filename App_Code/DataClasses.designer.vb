'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Route2Flow")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertWType(instance As WType)
    End Sub
  Partial Private Sub UpdateWType(instance As WType)
    End Sub
  Partial Private Sub DeleteWType(instance As WType)
    End Sub
  Partial Private Sub InsertBusinessUnit(instance As BusinessUnit)
    End Sub
  Partial Private Sub UpdateBusinessUnit(instance As BusinessUnit)
    End Sub
  Partial Private Sub DeleteBusinessUnit(instance As BusinessUnit)
    End Sub
  Partial Private Sub InsertDepartment(instance As Department)
    End Sub
  Partial Private Sub UpdateDepartment(instance As Department)
    End Sub
  Partial Private Sub DeleteDepartment(instance As Department)
    End Sub
  Partial Private Sub InsertMember(instance As Member)
    End Sub
  Partial Private Sub UpdateMember(instance As Member)
    End Sub
  Partial Private Sub DeleteMember(instance As Member)
    End Sub
  Partial Private Sub InsertProcess(instance As Process)
    End Sub
  Partial Private Sub UpdateProcess(instance As Process)
    End Sub
  Partial Private Sub DeleteProcess(instance As Process)
    End Sub
  Partial Private Sub InsertRole(instance As Role)
    End Sub
  Partial Private Sub UpdateRole(instance As Role)
    End Sub
  Partial Private Sub DeleteRole(instance As Role)
    End Sub
  Partial Private Sub InsertRoute(instance As Route)
    End Sub
  Partial Private Sub UpdateRoute(instance As Route)
    End Sub
  Partial Private Sub DeleteRoute(instance As Route)
    End Sub
  Partial Private Sub InsertStep(instance As [Step])
    End Sub
  Partial Private Sub UpdateStep(instance As [Step])
    End Sub
  Partial Private Sub DeleteStep(instance As [Step])
    End Sub
  Partial Private Sub InsertUserLogin(instance As UserLogin)
    End Sub
  Partial Private Sub UpdateUserLogin(instance As UserLogin)
    End Sub
  Partial Private Sub DeleteUserLogin(instance As UserLogin)
    End Sub
  Partial Private Sub InsertWLog(instance As WLog)
    End Sub
  Partial Private Sub UpdateWLog(instance As WLog)
    End Sub
  Partial Private Sub DeleteWLog(instance As WLog)
    End Sub
    Partial Private Sub InsertWork(instance As Work)
    End Sub
    Partial Private Sub UpdateWork(instance As Work)
    End Sub
    Partial Private Sub DeleteWork(instance As Work)
    End Sub
    Partial Private Sub InsertWorkInProcess(instance As WorkInProcess)
    End Sub
    Partial Private Sub UpdateWorkInProcess(instance As WorkInProcess)
    End Sub
    Partial Private Sub DeleteWorkInProcess(instance As WorkInProcess)
    End Sub
    Partial Private Sub InsertWStatus(instance As WStatus)
    End Sub
    Partial Private Sub UpdateWStatus(instance As WStatus)
    End Sub
    Partial Private Sub DeleteWStatus(instance As WStatus)
    End Sub
    Partial Private Sub InsertWSubtype(instance As WSubtype)
    End Sub
    Partial Private Sub UpdateWSubtype(instance As WSubtype)
    End Sub
    Partial Private Sub DeleteWSubtype(instance As WSubtype)
    End Sub
#End Region

    Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Route2FlowConnectionString1").ConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property ActionMessages() As System.Data.Linq.Table(Of ActionMessage)
        Get
            Return Me.GetTable(Of ActionMessage)()
        End Get
    End Property

    Public ReadOnly Property WTypes() As System.Data.Linq.Table(Of WType)
        Get
            Return Me.GetTable(Of WType)()
        End Get
    End Property

    Public ReadOnly Property Attachments() As System.Data.Linq.Table(Of Attachment)
        Get
            Return Me.GetTable(Of Attachment)()
        End Get
    End Property

    Public ReadOnly Property BusinessUnits() As System.Data.Linq.Table(Of BusinessUnit)
        Get
            Return Me.GetTable(Of BusinessUnit)()
        End Get
    End Property

    Public ReadOnly Property Departments() As System.Data.Linq.Table(Of Department)
        Get
            Return Me.GetTable(Of Department)()
        End Get
    End Property

    Public ReadOnly Property Members() As System.Data.Linq.Table(Of Member)
        Get
            Return Me.GetTable(Of Member)()
        End Get
    End Property

    Public ReadOnly Property Processes() As System.Data.Linq.Table(Of Process)
        Get
            Return Me.GetTable(Of Process)()
        End Get
    End Property

    Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
        Get
            Return Me.GetTable(Of Role)()
        End Get
    End Property

    Public ReadOnly Property Routes() As System.Data.Linq.Table(Of Route)
        Get
            Return Me.GetTable(Of Route)()
        End Get
    End Property

    Public ReadOnly Property Steps() As System.Data.Linq.Table(Of [Step])
        Get
            Return Me.GetTable(Of [Step])()
        End Get
    End Property

    Public ReadOnly Property UserLogins() As System.Data.Linq.Table(Of UserLogin)
        Get
            Return Me.GetTable(Of UserLogin)()
        End Get
    End Property

    Public ReadOnly Property WLogs() As System.Data.Linq.Table(Of WLog)
        Get
            Return Me.GetTable(Of WLog)()
        End Get
    End Property

    Public ReadOnly Property Works() As System.Data.Linq.Table(Of Work)
        Get
            Return Me.GetTable(Of Work)()
        End Get
    End Property

    Public ReadOnly Property WorkInProcesses() As System.Data.Linq.Table(Of WorkInProcess)
        Get
            Return Me.GetTable(Of WorkInProcess)()
        End Get
    End Property

    Public ReadOnly Property WStatus() As System.Data.Linq.Table(Of WStatus)
        Get
            Return Me.GetTable(Of WStatus)()
        End Get
    End Property

    Public ReadOnly Property WSubtypes() As System.Data.Linq.Table(Of WSubtype)
        Get
            Return Me.GetTable(Of WSubtype)()
        End Get
    End Property

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SOFTFLOW_sp_CreateRouteWork")> _
    Public Function SOFTFLOW_sp_CreateRouteWork( _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal wid As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RID", DbType:="VarChar(3)")> ByVal rID As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PID", DbType:="VarChar(3)")> ByVal pID As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FID", DbType:="VarChar(3)")> ByVal fID As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal wsubject As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal worigin As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal wowner As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal wdate As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal wdsc As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal seclevcode As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal prioritycode As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(13)")> ByVal registerdep As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal registeruid As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal registerno As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal dateregistered As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(8)")> ByVal timeregistered As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal datecompleted As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(8)")> ByVal timecompleted As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Maxtime", DbType:="VarChar(10)")> ByVal maxtime As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RefWork", DbType:="VarChar(100)")> ByVal refWork As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExpireDate", DbType:="VarChar(10)")> ByVal expireDate As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Location", DbType:="VarChar(255)")> ByVal location As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal status As String, _
                <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal ip As String) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), wid, rID, pID, fID, wsubject, worigin, wowner, wdate, wdsc, seclevcode, prioritycode, registerdep, registeruid, registerno, dateregistered, timeregistered, datecompleted, timecompleted, maxtime, refWork, expireDate, location, status, ip)
        Return CType(result.ReturnValue, Integer)
    End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActionMessage")> _
Partial Public Class ActionMessage

    Private _wid As String

    Private _bid As String

    Private _usrid As String

    Private _actiondate As String

    Private _actiontime As String

    Private _actionmsg As String

    Private _presentto As String

    Private _commandcode As String

    Private _Signature As String

    Public Sub New()
        MyBase.New()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wid", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property wid() As String
        Get
            Return Me._wid
        End Get
        Set(value As String)
            If (String.Equals(Me._wid, value) = False) Then
                Me._wid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bid", DbType:="VarChar(13) NOT NULL", CanBeNull:=False)> _
    Public Property bid() As String
        Get
            Return Me._bid
        End Get
        Set(value As String)
            If (String.Equals(Me._bid, value) = False) Then
                Me._bid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usrid", DbType:="VarChar(15) NOT NULL", CanBeNull:=False)> _
    Public Property usrid() As String
        Get
            Return Me._usrid
        End Get
        Set(value As String)
            If (String.Equals(Me._usrid, value) = False) Then
                Me._usrid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actiondate", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property actiondate() As String
        Get
            Return Me._actiondate
        End Get
        Set(value As String)
            If (String.Equals(Me._actiondate, value) = False) Then
                Me._actiondate = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actiontime", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property actiontime() As String
        Get
            Return Me._actiontime
        End Get
        Set(value As String)
            If (String.Equals(Me._actiontime, value) = False) Then
                Me._actiontime = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actionmsg", DbType:="Text", UpdateCheck:=UpdateCheck.Never)> _
    Public Property actionmsg() As String
        Get
            Return Me._actionmsg
        End Get
        Set(value As String)
            If (String.Equals(Me._actionmsg, value) = False) Then
                Me._actionmsg = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_presentto", DbType:="VarChar(50)")> _
    Public Property presentto() As String
        Get
            Return Me._presentto
        End Get
        Set(value As String)
            If (String.Equals(Me._presentto, value) = False) Then
                Me._presentto = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commandcode", DbType:="VarChar(2)")> _
    Public Property commandcode() As String
        Get
            Return Me._commandcode
        End Get
        Set(value As String)
            If (String.Equals(Me._commandcode, value) = False) Then
                Me._commandcode = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Signature", DbType:="Text", UpdateCheck:=UpdateCheck.Never)> _
    Public Property Signature() As String
        Get
            Return Me._Signature
        End Get
        Set(value As String)
            If (String.Equals(Me._Signature, value) = False) Then
                Me._Signature = value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WType")> _
Partial Public Class WType
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CODE As String

    Private _DSC As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODEChanging(value As String)
    End Sub
    Partial Private Sub OnCODEChanged()
    End Sub
    Partial Private Sub OnDSCChanging(value As String)
    End Sub
    Partial Private Sub OnDSCChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property CODE() As String
        Get
            Return Me._CODE
        End Get
        Set(value As String)
            If (String.Equals(Me._CODE, value) = False) Then
                Me.OnCODEChanging(value)
                Me.SendPropertyChanging()
                Me._CODE = value
                Me.SendPropertyChanged("CODE")
                Me.OnCODEChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DSC", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property DSC() As String
        Get
            Return Me._DSC
        End Get
        Set(value As String)
            If (String.Equals(Me._DSC, value) = False) Then
                Me.OnDSCChanging(value)
                Me.SendPropertyChanging()
                Me._DSC = value
                Me.SendPropertyChanged("DSC")
                Me.OnDSCChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Attachment")> _
Partial Public Class Attachment

    Private _wid As String

    Private _bid As String

    Private _attachdate As String

    Private _attachtime As String

    Private _attachname As String

    Private _userattach As String

    Private _contextattach As String

    Private _itemno As String

    Private _actionmsg As String

    Private _linkwid As String

    Private _allowupdate As String

    Public Sub New()
        MyBase.New()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wid", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property wid() As String
        Get
            Return Me._wid
        End Get
        Set(value As String)
            If (String.Equals(Me._wid, value) = False) Then
                Me._wid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bid", DbType:="VarChar(14) NOT NULL", CanBeNull:=False)> _
    Public Property bid() As String
        Get
            Return Me._bid
        End Get
        Set(value As String)
            If (String.Equals(Me._bid, value) = False) Then
                Me._bid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attachdate", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property attachdate() As String
        Get
            Return Me._attachdate
        End Get
        Set(value As String)
            If (String.Equals(Me._attachdate, value) = False) Then
                Me._attachdate = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attachtime", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property attachtime() As String
        Get
            Return Me._attachtime
        End Get
        Set(value As String)
            If (String.Equals(Me._attachtime, value) = False) Then
                Me._attachtime = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attachname", DbType:="VarChar(100)")> _
    Public Property attachname() As String
        Get
            Return Me._attachname
        End Get
        Set(value As String)
            If (String.Equals(Me._attachname, value) = False) Then
                Me._attachname = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userattach", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property userattach() As String
        Get
            Return Me._userattach
        End Get
        Set(value As String)
            If (String.Equals(Me._userattach, value) = False) Then
                Me._userattach = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contextattach", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property contextattach() As String
        Get
            Return Me._contextattach
        End Get
        Set(value As String)
            If (String.Equals(Me._contextattach, value) = False) Then
                Me._contextattach = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemno", DbType:="VarChar(5) NOT NULL", CanBeNull:=False)> _
    Public Property itemno() As String
        Get
            Return Me._itemno
        End Get
        Set(value As String)
            If (String.Equals(Me._itemno, value) = False) Then
                Me._itemno = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actionmsg", DbType:="Text NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)> _
    Public Property actionmsg() As String
        Get
            Return Me._actionmsg
        End Get
        Set(value As String)
            If (String.Equals(Me._actionmsg, value) = False) Then
                Me._actionmsg = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linkwid", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property linkwid() As String
        Get
            Return Me._linkwid
        End Get
        Set(value As String)
            If (String.Equals(Me._linkwid, value) = False) Then
                Me._linkwid = value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowupdate", DbType:="VarChar(1) NOT NULL", CanBeNull:=False)> _
    Public Property allowupdate() As String
        Get
            Return Me._allowupdate
        End Get
        Set(value As String)
            If (String.Equals(Me._allowupdate, value) = False) Then
                Me._allowupdate = value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BusinessUnit")> _
Partial Public Class BusinessUnit
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _BU As String

    Private _Name As String

    Private _outnumber As String

    Private _password As String

    Private _prefix As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBUChanging(value As String)
    End Sub
    Partial Private Sub OnBUChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnoutnumberChanging(value As String)
    End Sub
    Partial Private Sub OnoutnumberChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnprefixChanging(value As String)
    End Sub
    Partial Private Sub OnprefixChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BU", DbType:="VarChar(4) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property BU() As String
        Get
            Return Me._BU
        End Get
        Set(value As String)
            If (String.Equals(Me._BU, value) = False) Then
                Me.OnBUChanging(value)
                Me.SendPropertyChanging()
                Me._BU = value
                Me.SendPropertyChanged("BU")
                Me.OnBUChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(105) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_outnumber", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property outnumber() As String
        Get
            Return Me._outnumber
        End Get
        Set(value As String)
            If (String.Equals(Me._outnumber, value) = False) Then
                Me.OnoutnumberChanging(value)
                Me.SendPropertyChanging()
                Me._outnumber = value
                Me.SendPropertyChanged("outnumber")
                Me.OnoutnumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(14) NOT NULL", CanBeNull:=False)> _
    Public Property password() As String
        Get
            Return Me._password
        End Get
        Set(value As String)
            If (String.Equals(Me._password, value) = False) Then
                Me.OnpasswordChanging(value)
                Me.SendPropertyChanging()
                Me._password = value
                Me.SendPropertyChanged("password")
                Me.OnpasswordChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prefix", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property prefix() As String
        Get
            Return Me._prefix
        End Get
        Set(value As String)
            If (String.Equals(Me._prefix, value) = False) Then
                Me.OnprefixChanging(value)
                Me.SendPropertyChanging()
                Me._prefix = value
                Me.SendPropertyChanged("prefix")
                Me.OnprefixChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Department")> _
Partial Public Class Department
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _DID As String

    Private _DSC As String

    Private _BU As String

    Private _WFID As String

    Private _Wfdsc As String

    Private _StateCode As String

    Private _RegisterNo As String

    Private _SendNo As String

    Private _ItemNo As String

    Private _DocuName As String

    Private _HomeDir As String

    Private _CLASS As String

    Private _PASSWORD As String

    Private _UserLogins As EntitySet(Of UserLogin)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDIDChanging(value As String)
    End Sub
    Partial Private Sub OnDIDChanged()
    End Sub
    Partial Private Sub OnDSCChanging(value As String)
    End Sub
    Partial Private Sub OnDSCChanged()
    End Sub
    Partial Private Sub OnBUChanging(value As String)
    End Sub
    Partial Private Sub OnBUChanged()
    End Sub
    Partial Private Sub OnWFIDChanging(value As String)
    End Sub
    Partial Private Sub OnWFIDChanged()
    End Sub
    Partial Private Sub OnWfdscChanging(value As String)
    End Sub
    Partial Private Sub OnWfdscChanged()
    End Sub
    Partial Private Sub OnStateCodeChanging(value As String)
    End Sub
    Partial Private Sub OnStateCodeChanged()
    End Sub
    Partial Private Sub OnRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterNoChanged()
    End Sub
    Partial Private Sub OnSendNoChanging(value As String)
    End Sub
    Partial Private Sub OnSendNoChanged()
    End Sub
    Partial Private Sub OnItemNoChanging(value As String)
    End Sub
    Partial Private Sub OnItemNoChanged()
    End Sub
    Partial Private Sub OnDocuNameChanging(value As String)
    End Sub
    Partial Private Sub OnDocuNameChanged()
    End Sub
    Partial Private Sub OnHomeDirChanging(value As String)
    End Sub
    Partial Private Sub OnHomeDirChanged()
    End Sub
    Partial Private Sub OnCLASSChanging(value As String)
    End Sub
    Partial Private Sub OnCLASSChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._UserLogins = New EntitySet(Of UserLogin)(AddressOf Me.attach_UserLogins, AddressOf Me.detach_UserLogins)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property DID() As String
        Get
            Return Me._DID
        End Get
        Set(value As String)
            If (String.Equals(Me._DID, value) = False) Then
                Me.OnDIDChanging(value)
                Me.SendPropertyChanging()
                Me._DID = value
                Me.SendPropertyChanged("DID")
                Me.OnDIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DSC", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property DSC() As String
        Get
            Return Me._DSC
        End Get
        Set(value As String)
            If (String.Equals(Me._DSC, value) = False) Then
                Me.OnDSCChanging(value)
                Me.SendPropertyChanging()
                Me._DSC = value
                Me.SendPropertyChanged("DSC")
                Me.OnDSCChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BU", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property BU() As String
        Get
            Return Me._BU
        End Get
        Set(value As String)
            If (String.Equals(Me._BU, value) = False) Then
                Me.OnBUChanging(value)
                Me.SendPropertyChanging()
                Me._BU = value
                Me.SendPropertyChanged("BU")
                Me.OnBUChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WFID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property WFID() As String
        Get
            Return Me._WFID
        End Get
        Set(value As String)
            If (String.Equals(Me._WFID, value) = False) Then
                Me.OnWFIDChanging(value)
                Me.SendPropertyChanging()
                Me._WFID = value
                Me.SendPropertyChanged("WFID")
                Me.OnWFIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wfdsc", DbType:="VarChar(40) NOT NULL", CanBeNull:=False)> _
    Public Property Wfdsc() As String
        Get
            Return Me._Wfdsc
        End Get
        Set(value As String)
            If (String.Equals(Me._Wfdsc, value) = False) Then
                Me.OnWfdscChanging(value)
                Me.SendPropertyChanging()
                Me._Wfdsc = value
                Me.SendPropertyChanged("Wfdsc")
                Me.OnWfdscChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property StateCode() As String
        Get
            Return Me._StateCode
        End Get
        Set(value As String)
            If (String.Equals(Me._StateCode, value) = False) Then
                Me.OnStateCodeChanging(value)
                Me.SendPropertyChanging()
                Me._StateCode = value
                Me.SendPropertyChanged("StateCode")
                Me.OnStateCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterNo", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property RegisterNo() As String
        Get
            Return Me._RegisterNo
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterNo, value) = False) Then
                Me.OnRegisterNoChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterNo = value
                Me.SendPropertyChanged("RegisterNo")
                Me.OnRegisterNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendNo", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property SendNo() As String
        Get
            Return Me._SendNo
        End Get
        Set(value As String)
            If (String.Equals(Me._SendNo, value) = False) Then
                Me.OnSendNoChanging(value)
                Me.SendPropertyChanging()
                Me._SendNo = value
                Me.SendPropertyChanged("SendNo")
                Me.OnSendNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemNo", DbType:="VarChar(6) NOT NULL", CanBeNull:=False)> _
    Public Property ItemNo() As String
        Get
            Return Me._ItemNo
        End Get
        Set(value As String)
            If (String.Equals(Me._ItemNo, value) = False) Then
                Me.OnItemNoChanging(value)
                Me.SendPropertyChanging()
                Me._ItemNo = value
                Me.SendPropertyChanged("ItemNo")
                Me.OnItemNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocuName", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property DocuName() As String
        Get
            Return Me._DocuName
        End Get
        Set(value As String)
            If (String.Equals(Me._DocuName, value) = False) Then
                Me.OnDocuNameChanging(value)
                Me.SendPropertyChanging()
                Me._DocuName = value
                Me.SendPropertyChanged("DocuName")
                Me.OnDocuNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomeDir", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)> _
    Public Property HomeDir() As String
        Get
            Return Me._HomeDir
        End Get
        Set(value As String)
            If (String.Equals(Me._HomeDir, value) = False) Then
                Me.OnHomeDirChanging(value)
                Me.SendPropertyChanging()
                Me._HomeDir = value
                Me.SendPropertyChanged("HomeDir")
                Me.OnHomeDirChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="CLASS", Storage:="_CLASS", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property [CLASS]() As String
        Get
            Return Me._CLASS
        End Get
        Set(value As String)
            If (String.Equals(Me._CLASS, value) = False) Then
                Me.OnCLASSChanging(value)
                Me.SendPropertyChanging()
                Me._CLASS = value
                Me.SendPropertyChanged("[CLASS]")
                Me.OnCLASSChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="VarChar(14) NOT NULL", CanBeNull:=False)> _
    Public Property PASSWORD() As String
        Get
            Return Me._PASSWORD
        End Get
        Set(value As String)
            If (String.Equals(Me._PASSWORD, value) = False) Then
                Me.OnPASSWORDChanging(value)
                Me.SendPropertyChanging()
                Me._PASSWORD = value
                Me.SendPropertyChanged("PASSWORD")
                Me.OnPASSWORDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_UserLogin", Storage:="_UserLogins", ThisKey:="DID", OtherKey:="DID")> _
    Public Property UserLogins() As EntitySet(Of UserLogin)
        Get
            Return Me._UserLogins
        End Get
        Set(value As EntitySet(Of UserLogin))
            Me._UserLogins.Assign(value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_UserLogins(ByVal entity As UserLogin)
        Me.SendPropertyChanging()
        entity.Department = Me
    End Sub

    Private Sub detach_UserLogins(ByVal entity As UserLogin)
        Me.SendPropertyChanging()
        entity.Department = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Member")> _
Partial Public Class Member
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RID As String

    Private _PID As String

    Private _UID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnPIDChanging(value As String)
    End Sub
    Partial Private Sub OnPIDChanged()
    End Sub
    Partial Private Sub OnUIDChanging(value As String)
    End Sub
    Partial Private Sub OnUIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property PID() As String
        Get
            Return Me._PID
        End Get
        Set(value As String)
            If (String.Equals(Me._PID, value) = False) Then
                Me.OnPIDChanging(value)
                Me.SendPropertyChanging()
                Me._PID = value
                Me.SendPropertyChanged("PID")
                Me.OnPIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property UID() As String
        Get
            Return Me._UID
        End Get
        Set(value As String)
            If (String.Equals(Me._UID, value) = False) Then
                Me.OnUIDChanging(value)
                Me.SendPropertyChanging()
                Me._UID = value
                Me.SendPropertyChanged("UID")
                Me.OnUIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Process")> _
Partial Public Class Process
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _PID As String

    Private _RID As String

    Private _Name As String

    Private _Description As String

    Private _Type As String

    Private _RegisterNo As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPIDChanging(value As String)
    End Sub
    Partial Private Sub OnPIDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterNoChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property PID() As String
        Get
            Return Me._PID
        End Get
        Set(value As String)
            If (String.Equals(Me._PID, value) = False) Then
                Me.OnPIDChanging(value)
                Me.SendPropertyChanging()
                Me._PID = value
                Me.SendPropertyChanged("PID")
                Me.OnPIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set(value As String)
            If (String.Equals(Me._Description, value) = False) Then
                Me.OnDescriptionChanging(value)
                Me.SendPropertyChanging()
                Me._Description = value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(1) NOT NULL", CanBeNull:=False)> _
    Public Property Type() As String
        Get
            Return Me._Type
        End Get
        Set(value As String)
            If (String.Equals(Me._Type, value) = False) Then
                Me.OnTypeChanging(value)
                Me.SendPropertyChanging()
                Me._Type = value
                Me.SendPropertyChanged("Type")
                Me.OnTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterNo", DbType:="VarChar(10)")> _
    Public Property RegisterNo() As String
        Get
            Return Me._RegisterNo
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterNo, value) = False) Then
                Me.OnRegisterNoChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterNo = value
                Me.SendPropertyChanged("RegisterNo")
                Me.OnRegisterNoChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Role")> _
Partial Public Class Role
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RoleID As String

    Private _Name As String

    Private _F1 As String

    Private _F2 As String

    Private _F3 As String

    Private _F4 As String

    Private _F5 As String

    Private _F6 As String

    Private _F7 As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As String)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnF1Changing(value As String)
    End Sub
    Partial Private Sub OnF1Changed()
    End Sub
    Partial Private Sub OnF2Changing(value As String)
    End Sub
    Partial Private Sub OnF2Changed()
    End Sub
    Partial Private Sub OnF3Changing(value As String)
    End Sub
    Partial Private Sub OnF3Changed()
    End Sub
    Partial Private Sub OnF4Changing(value As String)
    End Sub
    Partial Private Sub OnF4Changed()
    End Sub
    Partial Private Sub OnF5Changing(value As String)
    End Sub
    Partial Private Sub OnF5Changed()
    End Sub
    Partial Private Sub OnF6Changing(value As String)
    End Sub
    Partial Private Sub OnF6Changed()
    End Sub
    Partial Private Sub OnF7Changing(value As String)
    End Sub
    Partial Private Sub OnF7Changed()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="VarChar(4) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property RoleID() As String
        Get
            Return Me._RoleID
        End Get
        Set(value As String)
            If (String.Equals(Me._RoleID, value) = False) Then
                Me.OnRoleIDChanging(value)
                Me.SendPropertyChanging()
                Me._RoleID = value
                Me.SendPropertyChanged("RoleID")
                Me.OnRoleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F1", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F1() As String
        Get
            Return Me._F1
        End Get
        Set(value As String)
            If (String.Equals(Me._F1, value) = False) Then
                Me.OnF1Changing(value)
                Me.SendPropertyChanging()
                Me._F1 = value
                Me.SendPropertyChanged("F1")
                Me.OnF1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F2", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F2() As String
        Get
            Return Me._F2
        End Get
        Set(value As String)
            If (String.Equals(Me._F2, value) = False) Then
                Me.OnF2Changing(value)
                Me.SendPropertyChanging()
                Me._F2 = value
                Me.SendPropertyChanged("F2")
                Me.OnF2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F3", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F3() As String
        Get
            Return Me._F3
        End Get
        Set(value As String)
            If (String.Equals(Me._F3, value) = False) Then
                Me.OnF3Changing(value)
                Me.SendPropertyChanging()
                Me._F3 = value
                Me.SendPropertyChanged("F3")
                Me.OnF3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F4", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F4() As String
        Get
            Return Me._F4
        End Get
        Set(value As String)
            If (String.Equals(Me._F4, value) = False) Then
                Me.OnF4Changing(value)
                Me.SendPropertyChanging()
                Me._F4 = value
                Me.SendPropertyChanged("F4")
                Me.OnF4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F5", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F5() As String
        Get
            Return Me._F5
        End Get
        Set(value As String)
            If (String.Equals(Me._F5, value) = False) Then
                Me.OnF5Changing(value)
                Me.SendPropertyChanging()
                Me._F5 = value
                Me.SendPropertyChanged("F5")
                Me.OnF5Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F6", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property F6() As String
        Get
            Return Me._F6
        End Get
        Set(value As String)
            If (String.Equals(Me._F6, value) = False) Then
                Me.OnF6Changing(value)
                Me.SendPropertyChanging()
                Me._F6 = value
                Me.SendPropertyChanged("F6")
                Me.OnF6Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F7", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property F7() As String
        Get
            Return Me._F7
        End Get
        Set(value As String)
            If (String.Equals(Me._F7, value) = False) Then
                Me.OnF7Changing(value)
                Me.SendPropertyChanging()
                Me._F7 = value
                Me.SendPropertyChanged("F7")
                Me.OnF7Changed()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Route")> _
Partial Public Class Route
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RID As String

    Private _Name As String

    Private _LaunchDate As String

    Private _ExpiryDate As String

    Private _DateCreated As String

    Private _Authors As String

    Private _WFID As String

    Private _WNO As String

    Private _Docuname As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLaunchDateChanging(value As String)
    End Sub
    Partial Private Sub OnLaunchDateChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnAuthorsChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorsChanged()
    End Sub
    Partial Private Sub OnWFIDChanging(value As String)
    End Sub
    Partial Private Sub OnWFIDChanged()
    End Sub
    Partial Private Sub OnWNOChanging(value As String)
    End Sub
    Partial Private Sub OnWNOChanged()
    End Sub
    Partial Private Sub OnDocunameChanging(value As String)
    End Sub
    Partial Private Sub OnDocunameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LaunchDate", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property LaunchDate() As String
        Get
            Return Me._LaunchDate
        End Get
        Set(value As String)
            If (String.Equals(Me._LaunchDate, value) = False) Then
                Me.OnLaunchDateChanging(value)
                Me.SendPropertyChanging()
                Me._LaunchDate = value
                Me.SendPropertyChanged("LaunchDate")
                Me.OnLaunchDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="VarChar(10)")> _
    Public Property ExpiryDate() As String
        Get
            Return Me._ExpiryDate
        End Get
        Set(value As String)
            If (String.Equals(Me._ExpiryDate, value) = False) Then
                Me.OnExpiryDateChanging(value)
                Me.SendPropertyChanging()
                Me._ExpiryDate = value
                Me.SendPropertyChanged("ExpiryDate")
                Me.OnExpiryDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property DateCreated() As String
        Get
            Return Me._DateCreated
        End Get
        Set(value As String)
            If (String.Equals(Me._DateCreated, value) = False) Then
                Me.OnDateCreatedChanging(value)
                Me.SendPropertyChanging()
                Me._DateCreated = value
                Me.SendPropertyChanged("DateCreated")
                Me.OnDateCreatedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Authors", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Authors() As String
        Get
            Return Me._Authors
        End Get
        Set(value As String)
            If (String.Equals(Me._Authors, value) = False) Then
                Me.OnAuthorsChanging(value)
                Me.SendPropertyChanging()
                Me._Authors = value
                Me.SendPropertyChanged("Authors")
                Me.OnAuthorsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WFID", DbType:="VarChar(50)")> _
    Public Property WFID() As String
        Get
            Return Me._WFID
        End Get
        Set(value As String)
            If (String.Equals(Me._WFID, value) = False) Then
                Me.OnWFIDChanging(value)
                Me.SendPropertyChanging()
                Me._WFID = value
                Me.SendPropertyChanged("WFID")
                Me.OnWFIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WNO", DbType:="VarChar(10)")> _
    Public Property WNO() As String
        Get
            Return Me._WNO
        End Get
        Set(value As String)
            If (String.Equals(Me._WNO, value) = False) Then
                Me.OnWNOChanging(value)
                Me.SendPropertyChanging()
                Me._WNO = value
                Me.SendPropertyChanged("WNO")
                Me.OnWNOChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Docuname", DbType:="VarChar(8)")> _
    Public Property Docuname() As String
        Get
            Return Me._Docuname
        End Get
        Set(value As String)
            If (String.Equals(Me._Docuname, value) = False) Then
                Me.OnDocunameChanging(value)
                Me.SendPropertyChanging()
                Me._Docuname = value
                Me.SendPropertyChanged("Docuname")
                Me.OnDocunameChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Step")> _
Partial Public Class [Step]
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RID As String

    Private _Step As String

    Private _Action As String

    Private _PID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnStepChanging(value As String)
    End Sub
    Partial Private Sub OnStepChanged()
    End Sub
    Partial Private Sub OnActionChanging(value As String)
    End Sub
    Partial Private Sub OnActionChanged()
    End Sub
    Partial Private Sub OnPIDChanging(value As String)
    End Sub
    Partial Private Sub OnPIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Step", Storage:="_Step", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property [Step]() As String
        Get
            Return Me._Step
        End Get
        Set(value As String)
            If (String.Equals(Me._Step, value) = False) Then
                Me.OnStepChanging(value)
                Me.SendPropertyChanging()
                Me._Step = value
                Me.SendPropertyChanged("[Step]")
                Me.OnStepChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Action", DbType:="VarChar(50) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property Action() As String
        Get
            Return Me._Action
        End Get
        Set(value As String)
            If (String.Equals(Me._Action, value) = False) Then
                Me.OnActionChanging(value)
                Me.SendPropertyChanging()
                Me._Action = value
                Me.SendPropertyChanged("Action")
                Me.OnActionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property PID() As String
        Get
            Return Me._PID
        End Get
        Set(value As String)
            If (String.Equals(Me._PID, value) = False) Then
                Me.OnPIDChanging(value)
                Me.SendPropertyChanging()
                Me._PID = value
                Me.SendPropertyChanged("PID")
                Me.OnPIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserLogin")> _
Partial Public Class UserLogin
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _UID As String

    Private _DID As String

    Private _DepType As String

    Private _Name As String

    Private _Surname As String

    Private _Password As String

    Private _Email As String

    Private _SSN As String

    Private _Address As String

    Private _Tel1 As String

    Private _Tel2 As String

    Private _Role As String

    Private _SecCode As String

    Private _UserType As String

    Private _Department As EntityRef(Of Department)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUIDChanging(value As String)
    End Sub
    Partial Private Sub OnUIDChanged()
    End Sub
    Partial Private Sub OnDIDChanging(value As String)
    End Sub
    Partial Private Sub OnDIDChanged()
    End Sub
    Partial Private Sub OnDepTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDepTypeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnSSNChanging(value As String)
    End Sub
    Partial Private Sub OnSSNChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnTel1Changing(value As String)
    End Sub
    Partial Private Sub OnTel1Changed()
    End Sub
    Partial Private Sub OnTel2Changing(value As String)
    End Sub
    Partial Private Sub OnTel2Changed()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    Partial Private Sub OnSecCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSecCodeChanged()
    End Sub
    Partial Private Sub OnUserTypeChanging(value As String)
    End Sub
    Partial Private Sub OnUserTypeChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._Department = CType(Nothing, EntityRef(Of Department))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property UID() As String
        Get
            Return Me._UID
        End Get
        Set(value As String)
            If (String.Equals(Me._UID, value) = False) Then
                Me.OnUIDChanging(value)
                Me.SendPropertyChanging()
                Me._UID = value
                Me.SendPropertyChanged("UID")
                Me.OnUIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property DID() As String
        Get
            Return Me._DID
        End Get
        Set(value As String)
            If (String.Equals(Me._DID, value) = False) Then
                If Me._Department.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnDIDChanging(value)
                Me.SendPropertyChanging()
                Me._DID = value
                Me.SendPropertyChanged("DID")
                Me.OnDIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepType", DbType:="VarChar(1) NOT NULL", CanBeNull:=False)> _
    Public Property DepType() As String
        Get
            Return Me._DepType
        End Get
        Set(value As String)
            If (String.Equals(Me._DepType, value) = False) Then
                Me.OnDepTypeChanging(value)
                Me.SendPropertyChanging()
                Me._DepType = value
                Me.SendPropertyChanged("DepType")
                Me.OnDepTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property Surname() As String
        Get
            Return Me._Surname
        End Get
        Set(value As String)
            If (String.Equals(Me._Surname, value) = False) Then
                Me.OnSurnameChanging(value)
                Me.SendPropertyChanging()
                Me._Surname = value
                Me.SendPropertyChanged("Surname")
                Me.OnSurnameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Password() As String
        Get
            Return Me._Password
        End Get
        Set(value As String)
            If (String.Equals(Me._Password, value) = False) Then
                Me.OnPasswordChanging(value)
                Me.SendPropertyChanging()
                Me._Password = value
                Me.SendPropertyChanged("Password")
                Me.OnPasswordChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property Email() As String
        Get
            Return Me._Email
        End Get
        Set(value As String)
            If (String.Equals(Me._Email, value) = False) Then
                Me.OnEmailChanging(value)
                Me.SendPropertyChanging()
                Me._Email = value
                Me.SendPropertyChanged("Email")
                Me.OnEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SSN", DbType:="VarChar(13) NOT NULL", CanBeNull:=False)> _
    Public Property SSN() As String
        Get
            Return Me._SSN
        End Get
        Set(value As String)
            If (String.Equals(Me._SSN, value) = False) Then
                Me.OnSSNChanging(value)
                Me.SendPropertyChanging()
                Me._SSN = value
                Me.SendPropertyChanged("SSN")
                Me.OnSSNChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property Address() As String
        Get
            Return Me._Address
        End Get
        Set(value As String)
            If (String.Equals(Me._Address, value) = False) Then
                Me.OnAddressChanging(value)
                Me.SendPropertyChanging()
                Me._Address = value
                Me.SendPropertyChanged("Address")
                Me.OnAddressChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tel1", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Tel1() As String
        Get
            Return Me._Tel1
        End Get
        Set(value As String)
            If (String.Equals(Me._Tel1, value) = False) Then
                Me.OnTel1Changing(value)
                Me.SendPropertyChanging()
                Me._Tel1 = value
                Me.SendPropertyChanged("Tel1")
                Me.OnTel1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tel2", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Tel2() As String
        Get
            Return Me._Tel2
        End Get
        Set(value As String)
            If (String.Equals(Me._Tel2, value) = False) Then
                Me.OnTel2Changing(value)
                Me.SendPropertyChanging()
                Me._Tel2 = value
                Me.SendPropertyChanged("Tel2")
                Me.OnTel2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)> _
    Public Property Role() As String
        Get
            Return Me._Role
        End Get
        Set(value As String)
            If (String.Equals(Me._Role, value) = False) Then
                Me.OnRoleChanging(value)
                Me.SendPropertyChanging()
                Me._Role = value
                Me.SendPropertyChanged("Role")
                Me.OnRoleChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecCode", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property SecCode() As String
        Get
            Return Me._SecCode
        End Get
        Set(value As String)
            If (String.Equals(Me._SecCode, value) = False) Then
                Me.OnSecCodeChanging(value)
                Me.SendPropertyChanging()
                Me._SecCode = value
                Me.SendPropertyChanged("SecCode")
                Me.OnSecCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserType", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property UserType() As String
        Get
            Return Me._UserType
        End Get
        Set(value As String)
            If (String.Equals(Me._UserType, value) = False) Then
                Me.OnUserTypeChanging(value)
                Me.SendPropertyChanging()
                Me._UserType = value
                Me.SendPropertyChanged("UserType")
                Me.OnUserTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_UserLogin", Storage:="_Department", ThisKey:="DID", OtherKey:="DID", IsForeignKey:=True)> _
    Public Property Department() As Department
        Get
            Return Me._Department.Entity
        End Get
        Set(value As Department)
            Dim previousValue As Department = Me._Department.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._Department.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Department.Entity = Nothing
                    previousValue.UserLogins.Remove(Me)
                End If
                Me._Department.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.UserLogins.Add(Me)
                    Me._DID = value.DID
                Else
                    Me._DID = CType(Nothing, String)
                End If
                Me.SendPropertyChanged("Department")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WLog")> _
Partial Public Class WLog
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _WID As String

    Private _ActionMsg As String

    Private _LogDate As String

    Private _LogTime As String

    Private _IP As String

    Private _UID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWIDChanging(value As String)
    End Sub
    Partial Private Sub OnWIDChanged()
    End Sub
    Partial Private Sub OnActionMsgChanging(value As String)
    End Sub
    Partial Private Sub OnActionMsgChanged()
    End Sub
    Partial Private Sub OnLogDateChanging(value As String)
    End Sub
    Partial Private Sub OnLogDateChanged()
    End Sub
    Partial Private Sub OnLogTimeChanging(value As String)
    End Sub
    Partial Private Sub OnLogTimeChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnUIDChanging(value As String)
    End Sub
    Partial Private Sub OnUIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WID", DbType:="VarChar(50) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property WID() As String
        Get
            Return Me._WID
        End Get
        Set(value As String)
            If (String.Equals(Me._WID, value) = False) Then
                Me.OnWIDChanging(value)
                Me.SendPropertyChanging()
                Me._WID = value
                Me.SendPropertyChanged("WID")
                Me.OnWIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionMsg", DbType:="Text NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)> _
    Public Property ActionMsg() As String
        Get
            Return Me._ActionMsg
        End Get
        Set(value As String)
            If (String.Equals(Me._ActionMsg, value) = False) Then
                Me.OnActionMsgChanging(value)
                Me.SendPropertyChanging()
                Me._ActionMsg = value
                Me.SendPropertyChanged("ActionMsg")
                Me.OnActionMsgChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogDate", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property LogDate() As String
        Get
            Return Me._LogDate
        End Get
        Set(value As String)
            If (String.Equals(Me._LogDate, value) = False) Then
                Me.OnLogDateChanging(value)
                Me.SendPropertyChanging()
                Me._LogDate = value
                Me.SendPropertyChanged("LogDate")
                Me.OnLogDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogTime", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property LogTime() As String
        Get
            Return Me._LogTime
        End Get
        Set(value As String)
            If (String.Equals(Me._LogTime, value) = False) Then
                Me.OnLogTimeChanging(value)
                Me.SendPropertyChanging()
                Me._LogTime = value
                Me.SendPropertyChanged("LogTime")
                Me.OnLogTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property IP() As String
        Get
            Return Me._IP
        End Get
        Set(value As String)
            If (String.Equals(Me._IP, value) = False) Then
                Me.OnIPChanging(value)
                Me.SendPropertyChanging()
                Me._IP = value
                Me.SendPropertyChanged("IP")
                Me.OnIPChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UID", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property UID() As String
        Get
            Return Me._UID
        End Get
        Set(value As String)
            If (String.Equals(Me._UID, value) = False) Then
                Me.OnUIDChanging(value)
                Me.SendPropertyChanging()
                Me._UID = value
                Me.SendPropertyChanged("UID")
                Me.OnUIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Work]")> _
Partial Public Class Work
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _WID As String

    Private _RID As String

    Private _FID As String

    Private _WType As String

    Private _WSubtype As String

    Private _WSubject As String

    Private _WOrigin As String

    Private _WOwner As String

    Private _WDate As String

    Private _WDsc As String

    Private _SecLevCode As String

    Private _PriorityCode As String

    Private _RegisterDep As String

    Private _RegisterUID As String

    Private _RegisterNo As String

    Private _DateRegistered As String

    Private _TimeRegistered As String

    Private _DateCompleted As String

    Private _TimeCompleted As String

    Private _Maxtime As String

    Private _RefWork As String

    Private _ExpireDate As String

    Private _Location As String

    Private _Status As String

    Private _WorkInProcesses As EntitySet(Of WorkInProcess)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWIDChanging(value As String)
    End Sub
    Partial Private Sub OnWIDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnFIDChanging(value As String)
    End Sub
    Partial Private Sub OnFIDChanged()
    End Sub
    Partial Private Sub OnWTypeChanging(value As String)
    End Sub
    Partial Private Sub OnWTypeChanged()
    End Sub
    Partial Private Sub OnWSubtypeChanging(value As String)
    End Sub
    Partial Private Sub OnWSubtypeChanged()
    End Sub
    Partial Private Sub OnWSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnWSubjectChanged()
    End Sub
    Partial Private Sub OnWOriginChanging(value As String)
    End Sub
    Partial Private Sub OnWOriginChanged()
    End Sub
    Partial Private Sub OnWOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnWOwnerChanged()
    End Sub
    Partial Private Sub OnWDateChanging(value As String)
    End Sub
    Partial Private Sub OnWDateChanged()
    End Sub
    Partial Private Sub OnWDscChanging(value As String)
    End Sub
    Partial Private Sub OnWDscChanged()
    End Sub
    Partial Private Sub OnSecLevCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSecLevCodeChanged()
    End Sub
    Partial Private Sub OnPriorityCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPriorityCodeChanged()
    End Sub
    Partial Private Sub OnRegisterDepChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterDepChanged()
    End Sub
    Partial Private Sub OnRegisterUIDChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterUIDChanged()
    End Sub
    Partial Private Sub OnRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterNoChanged()
    End Sub
    Partial Private Sub OnDateRegisteredChanging(value As String)
    End Sub
    Partial Private Sub OnDateRegisteredChanged()
    End Sub
    Partial Private Sub OnTimeRegisteredChanging(value As String)
    End Sub
    Partial Private Sub OnTimeRegisteredChanged()
    End Sub
    Partial Private Sub OnDateCompletedChanging(value As String)
    End Sub
    Partial Private Sub OnDateCompletedChanged()
    End Sub
    Partial Private Sub OnTimeCompletedChanging(value As String)
    End Sub
    Partial Private Sub OnTimeCompletedChanged()
    End Sub
    Partial Private Sub OnMaxtimeChanging(value As String)
    End Sub
    Partial Private Sub OnMaxtimeChanged()
    End Sub
    Partial Private Sub OnRefWorkChanging(value As String)
    End Sub
    Partial Private Sub OnRefWorkChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
#End Region

  

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WID", DbType:="VarChar(50) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
    Public Property WID() As String
        Get
            Return Me._WID
        End Get
        Set(value As String)
            If (String.Equals(Me._WID, value) = False) Then
                Me.OnWIDChanging(value)
                Me.SendPropertyChanging()
                Me._WID = value
                Me.SendPropertyChanged("WID")
                Me.OnWIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property FID() As String
        Get
            Return Me._FID
        End Get
        Set(value As String)
            If (String.Equals(Me._FID, value) = False) Then
                Me.OnFIDChanging(value)
                Me.SendPropertyChanging()
                Me._FID = value
                Me.SendPropertyChanged("FID")
                Me.OnFIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WType", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property WType() As String
        Get
            Return Me._WType
        End Get
        Set(value As String)
            If (String.Equals(Me._WType, value) = False) Then
                Me.OnWTypeChanging(value)
                Me.SendPropertyChanging()
                Me._WType = value
                Me.SendPropertyChanged("WType")
                Me.OnWTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WSubtype", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)> _
    Public Property WSubtype() As String
        Get
            Return Me._WSubtype
        End Get
        Set(value As String)
            If (String.Equals(Me._WSubtype, value) = False) Then
                Me.OnWSubtypeChanging(value)
                Me.SendPropertyChanging()
                Me._WSubtype = value
                Me.SendPropertyChanged("WSubtype")
                Me.OnWSubtypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WSubject", DbType:="VarChar(255) NOT NULL", CanBeNull:=False)> _
    Public Property WSubject() As String
        Get
            Return Me._WSubject
        End Get
        Set(value As String)
            If (String.Equals(Me._WSubject, value) = False) Then
                Me.OnWSubjectChanging(value)
                Me.SendPropertyChanging()
                Me._WSubject = value
                Me.SendPropertyChanged("WSubject")
                Me.OnWSubjectChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WOrigin", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property WOrigin() As String
        Get
            Return Me._WOrigin
        End Get
        Set(value As String)
            If (String.Equals(Me._WOrigin, value) = False) Then
                Me.OnWOriginChanging(value)
                Me.SendPropertyChanging()
                Me._WOrigin = value
                Me.SendPropertyChanged("WOrigin")
                Me.OnWOriginChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WOwner", DbType:="VarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property WOwner() As String
        Get
            Return Me._WOwner
        End Get
        Set(value As String)
            If (String.Equals(Me._WOwner, value) = False) Then
                Me.OnWOwnerChanging(value)
                Me.SendPropertyChanging()
                Me._WOwner = value
                Me.SendPropertyChanged("WOwner")
                Me.OnWOwnerChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WDate", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property WDate() As String
        Get
            Return Me._WDate
        End Get
        Set(value As String)
            If (String.Equals(Me._WDate, value) = False) Then
                Me.OnWDateChanging(value)
                Me.SendPropertyChanging()
                Me._WDate = value
                Me.SendPropertyChanged("WDate")
                Me.OnWDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WDsc", DbType:="Text", UpdateCheck:=UpdateCheck.Never)> _
    Public Property WDsc() As String
        Get
            Return Me._WDsc
        End Get
        Set(value As String)
            If (String.Equals(Me._WDsc, value) = False) Then
                Me.OnWDscChanging(value)
                Me.SendPropertyChanging()
                Me._WDsc = value
                Me.SendPropertyChanged("WDsc")
                Me.OnWDscChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecLevCode", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property SecLevCode() As String
        Get
            Return Me._SecLevCode
        End Get
        Set(value As String)
            If (String.Equals(Me._SecLevCode, value) = False) Then
                Me.OnSecLevCodeChanging(value)
                Me.SendPropertyChanging()
                Me._SecLevCode = value
                Me.SendPropertyChanged("SecLevCode")
                Me.OnSecLevCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriorityCode", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property PriorityCode() As String
        Get
            Return Me._PriorityCode
        End Get
        Set(value As String)
            If (String.Equals(Me._PriorityCode, value) = False) Then
                Me.OnPriorityCodeChanging(value)
                Me.SendPropertyChanging()
                Me._PriorityCode = value
                Me.SendPropertyChanged("PriorityCode")
                Me.OnPriorityCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterDep", DbType:="VarChar(13) NOT NULL", CanBeNull:=False)> _
    Public Property RegisterDep() As String
        Get
            Return Me._RegisterDep
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterDep, value) = False) Then
                Me.OnRegisterDepChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterDep = value
                Me.SendPropertyChanged("RegisterDep")
                Me.OnRegisterDepChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterUID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property RegisterUID() As String
        Get
            Return Me._RegisterUID
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterUID, value) = False) Then
                Me.OnRegisterUIDChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterUID = value
                Me.SendPropertyChanged("RegisterUID")
                Me.OnRegisterUIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterNo", DbType:="VarChar(15) NOT NULL", CanBeNull:=False)> _
    Public Property RegisterNo() As String
        Get
            Return Me._RegisterNo
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterNo, value) = False) Then
                Me.OnRegisterNoChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterNo = value
                Me.SendPropertyChanged("RegisterNo")
                Me.OnRegisterNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateRegistered", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property DateRegistered() As String
        Get
            Return Me._DateRegistered
        End Get
        Set(value As String)
            If (String.Equals(Me._DateRegistered, value) = False) Then
                Me.OnDateRegisteredChanging(value)
                Me.SendPropertyChanging()
                Me._DateRegistered = value
                Me.SendPropertyChanged("DateRegistered")
                Me.OnDateRegisteredChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeRegistered", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property TimeRegistered() As String
        Get
            Return Me._TimeRegistered
        End Get
        Set(value As String)
            If (String.Equals(Me._TimeRegistered, value) = False) Then
                Me.OnTimeRegisteredChanging(value)
                Me.SendPropertyChanging()
                Me._TimeRegistered = value
                Me.SendPropertyChanged("TimeRegistered")
                Me.OnTimeRegisteredChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property DateCompleted() As String
        Get
            Return Me._DateCompleted
        End Get
        Set(value As String)
            If (String.Equals(Me._DateCompleted, value) = False) Then
                Me.OnDateCompletedChanging(value)
                Me.SendPropertyChanging()
                Me._DateCompleted = value
                Me.SendPropertyChanged("DateCompleted")
                Me.OnDateCompletedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeCompleted", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property TimeCompleted() As String
        Get
            Return Me._TimeCompleted
        End Get
        Set(value As String)
            If (String.Equals(Me._TimeCompleted, value) = False) Then
                Me.OnTimeCompletedChanging(value)
                Me.SendPropertyChanging()
                Me._TimeCompleted = value
                Me.SendPropertyChanged("TimeCompleted")
                Me.OnTimeCompletedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maxtime", DbType:="VarChar(10)")> _
    Public Property Maxtime() As String
        Get
            Return Me._Maxtime
        End Get
        Set(value As String)
            If (String.Equals(Me._Maxtime, value) = False) Then
                Me.OnMaxtimeChanging(value)
                Me.SendPropertyChanging()
                Me._Maxtime = value
                Me.SendPropertyChanged("Maxtime")
                Me.OnMaxtimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefWork", DbType:="VarChar(100)")> _
    Public Property RefWork() As String
        Get
            Return Me._RefWork
        End Get
        Set(value As String)
            If (String.Equals(Me._RefWork, value) = False) Then
                Me.OnRefWorkChanging(value)
                Me.SendPropertyChanging()
                Me._RefWork = value
                Me.SendPropertyChanged("RefWork")
                Me.OnRefWorkChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="VarChar(10)")> _
    Public Property ExpireDate() As String
        Get
            Return Me._ExpireDate
        End Get
        Set(value As String)
            If (String.Equals(Me._ExpireDate, value) = False) Then
                Me.OnExpireDateChanging(value)
                Me.SendPropertyChanging()
                Me._ExpireDate = value
                Me.SendPropertyChanged("ExpireDate")
                Me.OnExpireDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="VarChar(255)")> _
    Public Property Location() As String
        Get
            Return Me._Location
        End Get
        Set(value As String)
            If (String.Equals(Me._Location, value) = False) Then
                Me.OnLocationChanging(value)
                Me.SendPropertyChanging()
                Me._Location = value
                Me.SendPropertyChanged("Location")
                Me.OnLocationChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(2) NOT NULL", CanBeNull:=False)> _
    Public Property Status() As String
        Get
            Return Me._Status
        End Get
        Set(value As String)
            If (String.Equals(Me._Status, value) = False) Then
                Me.OnStatusChanging(value)
                Me.SendPropertyChanging()
                Me._Status = value
                Me.SendPropertyChanged("Status")
                Me.OnStatusChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="_Work_WorkInProcess", Storage:="_WorkInProcesses", ThisKey:="WID", OtherKey:="WID")> _
    Public Property WorkInProcesses() As EntitySet(Of WorkInProcess)
        Get
            Return Me._WorkInProcesses
        End Get
        Set(value As EntitySet(Of WorkInProcess))
            Me._WorkInProcesses.Assign(value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_WorkInProcesses(ByVal entity As WorkInProcess)
        Me.SendPropertyChanging()
        entity.Work = Me
    End Sub

    Private Sub detach_WorkInProcesses(ByVal entity As WorkInProcess)
        Me.SendPropertyChanging()
        entity.Work = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkInProcess")> _
Partial Public Class WorkInProcess
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ID As Integer

    Private _WID As String

    Private _RID As String

    Private _SenderPID As String

    Private _PID As String

    Private _SenderDep As String

    Private _Dep As String

    Private _SenderUID As String

    Private _UID As String

    Private _Action As String

    Private _DateIn As String

    Private _TimeIn As String

    Private _DateModified As String

    Private _TimeModified As String

    Private _RegisterNo As String

    Private _Work As EntityRef(Of Work)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnWIDChanging(value As String)
    End Sub
    Partial Private Sub OnWIDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As String)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnSenderPIDChanging(value As String)
    End Sub
    Partial Private Sub OnSenderPIDChanged()
    End Sub
    Partial Private Sub OnPIDChanging(value As String)
    End Sub
    Partial Private Sub OnPIDChanged()
    End Sub
    Partial Private Sub OnSenderDepChanging(value As String)
    End Sub
    Partial Private Sub OnSenderDepChanged()
    End Sub
    Partial Private Sub OnDepChanging(value As String)
    End Sub
    Partial Private Sub OnDepChanged()
    End Sub
    Partial Private Sub OnSenderUIDChanging(value As String)
    End Sub
    Partial Private Sub OnSenderUIDChanged()
    End Sub
    Partial Private Sub OnUIDChanging(value As String)
    End Sub
    Partial Private Sub OnUIDChanged()
    End Sub
    Partial Private Sub OnActionChanging(value As String)
    End Sub
    Partial Private Sub OnActionChanged()
    End Sub
    Partial Private Sub OnDateInChanging(value As String)
    End Sub
    Partial Private Sub OnDateInChanged()
    End Sub
    Partial Private Sub OnTimeInChanging(value As String)
    End Sub
    Partial Private Sub OnTimeInChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As String)
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnTimeModifiedChanging(value As String)
    End Sub
    Partial Private Sub OnTimeModifiedChanged()
    End Sub
    Partial Private Sub OnRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterNoChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._Work = CType(Nothing, EntityRef(Of Work))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property ID() As Integer
        Get
            Return Me._ID
        End Get
        Set(value As Integer)
            If ((Me._ID = value) _
                        = False) Then
                Me.OnIDChanging(value)
                Me.SendPropertyChanging()
                Me._ID = value
                Me.SendPropertyChanged("ID")
                Me.OnIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WID", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property WID() As String
        Get
            Return Me._WID
        End Get
        Set(value As String)
            If (String.Equals(Me._WID, value) = False) Then
                If Me._Work.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnWIDChanging(value)
                Me.SendPropertyChanging()
                Me._WID = value
                Me.SendPropertyChanged("WID")
                Me.OnWIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property RID() As String
        Get
            Return Me._RID
        End Get
        Set(value As String)
            If (String.Equals(Me._RID, value) = False) Then
                Me.OnRIDChanging(value)
                Me.SendPropertyChanging()
                Me._RID = value
                Me.SendPropertyChanged("RID")
                Me.OnRIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SenderPID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property SenderPID() As String
        Get
            Return Me._SenderPID
        End Get
        Set(value As String)
            If (String.Equals(Me._SenderPID, value) = False) Then
                Me.OnSenderPIDChanging(value)
                Me.SendPropertyChanging()
                Me._SenderPID = value
                Me.SendPropertyChanged("SenderPID")
                Me.OnSenderPIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PID", DbType:="VarChar(3) NOT NULL", CanBeNull:=False)> _
    Public Property PID() As String
        Get
            Return Me._PID
        End Get
        Set(value As String)
            If (String.Equals(Me._PID, value) = False) Then
                Me.OnPIDChanging(value)
                Me.SendPropertyChanging()
                Me._PID = value
                Me.SendPropertyChanged("PID")
                Me.OnPIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SenderDep", DbType:="VarChar(13) NOT NULL", CanBeNull:=False)> _
    Public Property SenderDep() As String
        Get
            Return Me._SenderDep
        End Get
        Set(value As String)
            If (String.Equals(Me._SenderDep, value) = False) Then
                Me.OnSenderDepChanging(value)
                Me.SendPropertyChanging()
                Me._SenderDep = value
                Me.SendPropertyChanged("SenderDep")
                Me.OnSenderDepChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dep", DbType:="VarChar(13) NOT NULL", CanBeNull:=False)> _
    Public Property Dep() As String
        Get
            Return Me._Dep
        End Get
        Set(value As String)
            If (String.Equals(Me._Dep, value) = False) Then
                Me.OnDepChanging(value)
                Me.SendPropertyChanging()
                Me._Dep = value
                Me.SendPropertyChanged("Dep")
                Me.OnDepChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SenderUID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property SenderUID() As String
        Get
            Return Me._SenderUID
        End Get
        Set(value As String)
            If (String.Equals(Me._SenderUID, value) = False) Then
                Me.OnSenderUIDChanging(value)
                Me.SendPropertyChanging()
                Me._SenderUID = value
                Me.SendPropertyChanged("SenderUID")
                Me.OnSenderUIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UID", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property UID() As String
        Get
            Return Me._UID
        End Get
        Set(value As String)
            If (String.Equals(Me._UID, value) = False) Then
                Me.OnUIDChanging(value)
                Me.SendPropertyChanging()
                Me._UID = value
                Me.SendPropertyChanged("UID")
                Me.OnUIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Action", DbType:="VarChar(20) NOT NULL", CanBeNull:=False)> _
    Public Property Action() As String
        Get
            Return Me._Action
        End Get
        Set(value As String)
            If (String.Equals(Me._Action, value) = False) Then
                Me.OnActionChanging(value)
                Me.SendPropertyChanging()
                Me._Action = value
                Me.SendPropertyChanged("Action")
                Me.OnActionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateIn", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property DateIn() As String
        Get
            Return Me._DateIn
        End Get
        Set(value As String)
            If (String.Equals(Me._DateIn, value) = False) Then
                Me.OnDateInChanging(value)
                Me.SendPropertyChanging()
                Me._DateIn = value
                Me.SendPropertyChanged("DateIn")
                Me.OnDateInChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeIn", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property TimeIn() As String
        Get
            Return Me._TimeIn
        End Get
        Set(value As String)
            If (String.Equals(Me._TimeIn, value) = False) Then
                Me.OnTimeInChanging(value)
                Me.SendPropertyChanging()
                Me._TimeIn = value
                Me.SendPropertyChanged("TimeIn")
                Me.OnTimeInChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateModified", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
    Public Property DateModified() As String
        Get
            Return Me._DateModified
        End Get
        Set(value As String)
            If (String.Equals(Me._DateModified, value) = False) Then
                Me.OnDateModifiedChanging(value)
                Me.SendPropertyChanging()
                Me._DateModified = value
                Me.SendPropertyChanged("DateModified")
                Me.OnDateModifiedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeModified", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)> _
    Public Property TimeModified() As String
        Get
            Return Me._TimeModified
        End Get
        Set(value As String)
            If (String.Equals(Me._TimeModified, value) = False) Then
                Me.OnTimeModifiedChanging(value)
                Me.SendPropertyChanging()
                Me._TimeModified = value
                Me.SendPropertyChanged("TimeModified")
                Me.OnTimeModifiedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterNo", DbType:="VarChar(10)")> _
    Public Property RegisterNo() As String
        Get
            Return Me._RegisterNo
        End Get
        Set(value As String)
            If (String.Equals(Me._RegisterNo, value) = False) Then
                Me.OnRegisterNoChanging(value)
                Me.SendPropertyChanging()
                Me._RegisterNo = value
                Me.SendPropertyChanged("RegisterNo")
                Me.OnRegisterNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="_Work_WorkInProcess", Storage:="_Work", ThisKey:="WID", OtherKey:="WID", IsForeignKey:=True, DeleteOnNull:=True, DeleteRule:="CASCADE")> _
    Public Property Work() As Work
        Get
            Return Me._Work.Entity
        End Get
        Set(value As Work)
            Dim previousValue As Work = Me._Work.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._Work.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Work.Entity = Nothing
                    previousValue.WorkInProcesses.Remove(Me)
                End If
                Me._Work.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.WorkInProcesses.Add(Me)
                    Me._WID = value.WID
                Else
                    Me._WID = CType(Nothing, String)
                End If
                Me.SendPropertyChanged("Work")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WStatus")>  _
Partial Public Class WStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code As String
	
	Private _Dsc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDscChanging(value As String)
    End Sub
    Partial Private Sub OnDscChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="VarChar(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dsc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Dsc() As String
		Get
			Return Me._Dsc
		End Get
		Set
			If (String.Equals(Me._Dsc, value) = false) Then
				Me.OnDscChanging(value)
				Me.SendPropertyChanging
				Me._Dsc = value
				Me.SendPropertyChanged("Dsc")
				Me.OnDscChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WSubtype")>  _
Partial Public Class WSubtype
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Wtype As String
	
	Private _Code As String
	
	Private _Dsc As String
	
	Private _Category As String
	
	Private _Dep As String
	
	Private _Granted As String
	
	Private _SubWtypeNo As String
	
	Private _Used_code As String
	
	Private _AliasPosition As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWtypeChanging(value As String)
    End Sub
    Partial Private Sub OnWtypeChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDscChanging(value As String)
    End Sub
    Partial Private Sub OnDscChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnDepChanging(value As String)
    End Sub
    Partial Private Sub OnDepChanged()
    End Sub
    Partial Private Sub OnGrantedChanging(value As String)
    End Sub
    Partial Private Sub OnGrantedChanged()
    End Sub
    Partial Private Sub OnSubWtypeNoChanging(value As String)
    End Sub
    Partial Private Sub OnSubWtypeNoChanged()
    End Sub
    Partial Private Sub OnUsed_codeChanging(value As String)
    End Sub
    Partial Private Sub OnUsed_codeChanged()
    End Sub
    Partial Private Sub OnAliasPositionChanging(value As String)
    End Sub
    Partial Private Sub OnAliasPositionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wtype", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property Wtype() As String
		Get
			Return Me._Wtype
		End Get
		Set
			If (String.Equals(Me._Wtype, value) = false) Then
				Me.OnWtypeChanging(value)
				Me.SendPropertyChanging
				Me._Wtype = value
				Me.SendPropertyChanged("Wtype")
				Me.OnWtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dsc", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Dsc() As String
		Get
			Return Me._Dsc
		End Get
		Set
			If (String.Equals(Me._Dsc, value) = false) Then
				Me.OnDscChanging(value)
				Me.SendPropertyChanging
				Me._Dsc = value
				Me.SendPropertyChanged("Dsc")
				Me.OnDscChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dep", DbType:="VarChar(13) NOT NULL", CanBeNull:=false)>  _
	Public Property Dep() As String
		Get
			Return Me._Dep
		End Get
		Set
			If (String.Equals(Me._Dep, value) = false) Then
				Me.OnDepChanging(value)
				Me.SendPropertyChanging
				Me._Dep = value
				Me.SendPropertyChanged("Dep")
				Me.OnDepChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Granted", DbType:="VarChar(140) NOT NULL", CanBeNull:=false)>  _
	Public Property Granted() As String
		Get
			Return Me._Granted
		End Get
		Set
			If (String.Equals(Me._Granted, value) = false) Then
				Me.OnGrantedChanging(value)
				Me.SendPropertyChanging
				Me._Granted = value
				Me.SendPropertyChanged("Granted")
				Me.OnGrantedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubWtypeNo", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property SubWtypeNo() As String
		Get
			Return Me._SubWtypeNo
		End Get
		Set
			If (String.Equals(Me._SubWtypeNo, value) = false) Then
				Me.OnSubWtypeNoChanging(value)
				Me.SendPropertyChanging
				Me._SubWtypeNo = value
				Me.SendPropertyChanged("SubWtypeNo")
				Me.OnSubWtypeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Used_code", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Used_code() As String
		Get
			Return Me._Used_code
		End Get
		Set
			If (String.Equals(Me._Used_code, value) = false) Then
				Me.OnUsed_codeChanging(value)
				Me.SendPropertyChanging
				Me._Used_code = value
				Me.SendPropertyChanged("Used_code")
				Me.OnUsed_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AliasPosition", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasPosition() As String
		Get
			Return Me._AliasPosition
		End Get
		Set
			If (String.Equals(Me._AliasPosition, value) = false) Then
				Me.OnAliasPositionChanging(value)
				Me.SendPropertyChanging
				Me._AliasPosition = value
				Me.SendPropertyChanged("AliasPosition")
				Me.OnAliasPositionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
